import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id("com.kotori316.common.java")
    id("com.kotori316.common.publish")
    id "net.neoforged.gradle.userdev" version "7.0.161"
    id "signing"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

version = "${libs.versions.scala3.get()}-build-${project.build_number}"
group = "com.kotori316" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ScalableCatsForce-NeoForge"

jarJar.enable()

runs {
    configureEach {
        systemProperty "forge.logging.markers", "REGISTRIES"
        systemProperty "forge.logging.console.level", "debug"
        modSource project.sourceSets.main
    }

    client {
        systemProperty "forge.enabledGameTestNamespaces", project.mod_id
    }

    server {
        systemProperty "forge.enabledGameTestNamespaces", project.mod_id
        programArgument "--nogui"
    }

    data {
        programArguments.addAll "--mod", project.mod_id, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources/").getAbsolutePath()
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(libs.neoforge)

    // https://mvnrepository.com/artifact/org.scala-lang/scala-library
    implementation(libs.scala2)
    implementation(libs.scala3) { transitive = false }
    // https://mvnrepository.com/artifact/org.typelevel/cats-core
    implementation(libs.bundles.cats) { transitive = false }

    // Jar in Jar
    jarJar(group: "org.scala-lang", name: "scala-library", version: "[${libs.versions.scala2.get()}, 3.0)") { transitive = false }
    jarJar(group: "org.scala-lang", name: "scala3-library_3", version: "[3.0, ${libs.versions.scala3.get()}]") { transitive = false }
    jarJar(group: "org.typelevel", name: "cats-core_3", version: "[2.0, ${libs.versions.cats.get()}]") { transitive = false }
    jarJar(group: "org.typelevel", name: "cats-kernel_3", version: "[2.0, ${libs.versions.cats.get()}]") { transitive = false }
    jarJar(group: "org.typelevel", name: "cats-free_3", version: "[2.0, ${libs.versions.cats.get()}]") { transitive = false }

    // Test Dependencies.
    testImplementation(libs.jupiter.api)
    testImplementation(libs.jupiter.params)
    testRuntimeOnly(libs.jupiter.engine)
    testImplementation(libs.jupiter.launcher)
    testImplementation(libs.mockito.core)
    testImplementation(libs.mockito.inline)
}

jar {
    manifest {
        attributes([
                "FMLModType"           : "LIBRARY",
                "Automatic-Module-Name": "kotori_scala",
        ])
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
        ])
    }
    archiveClassifier.set("dev")
}

tasks.register("normalJar", Jar) {
}

// Tell the artifact system about our extra jars
artifacts {
    archives shadowJar as Object, sourcesJar
}

tasks.jarJar.configure {
    archiveClassifier.set("jar-jar")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
}

// ---------- Publish ----------
final boolean RELEASE_DEBUG = Boolean.parseBoolean(System.getenv("RELEASE_DEBUG") ?: "true")

curseforge {
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSE_TOKEN") ?: ""
    project {
        id = "320926"
        changelogType = "markdown"
        changelog = createChangelog()
        releaseType = "release"
        addGameVersion(libs.versions.minecraft.get())
        addGameVersion("NeoForge")
        mainArtifact(tasks.shadowJar)
        addArtifact(tasks.jar)
        addArtifact(tasks.sourcesJar)
        addArtifact(tasks.jarJar)
    }
    options {
        curseGradleOptions.debug = RELEASE_DEBUG // defaults to false
        curseGradleOptions.javaVersionAutoDetect = false
        curseGradleOptions.forgeGradleIntegration = false
    }
}

modrinth {
    token = project.findProperty("modrinthToken") as String ?: System.getenv("MODRINTH_TOKEN") ?: ""
    projectId = "scalable-cats-force"
    versionType = "release"
    uploadFile = tasks.shadowJar
    additionalFiles = [
            tasks.jar,
            tasks.sourcesJar,
            tasks.jarJar,
    ]
    gameVersions = [libs.versions.minecraft.get()]
    loaders = ["neoforge"]
    changelog = createChangelog()
    debugMode = RELEASE_DEBUG
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName.toLowerCase()
            from components.java

            pom {
                name = archivesBaseName
                description = "Scala Loading library build with Minecraft ${libs.versions.minecraft.get()} and Neo Forge ${libs.versions.neoforge.get()}"
                url = "https://github.com/Kotori316/SLP"
                packaging = "jar"
                withXml {
                    def pomNode = asNode() as Node
                    pomNode.dependencies."*".findAll() { Node node -> node.parent().remove(node) }
                }
            }
        }
    }
}

tasks.register("jksSignJar") {
    dependsOn(tasks.shadowJar, tasks.jar, tasks.jarJar, tasks.sourcesJar)
    boolean executeCondition = project.hasProperty("jarSign.keyAlias") &&
            project.hasProperty("jarSign.keyLocation") &&
            project.hasProperty("jarSign.storePass")
    onlyIf { executeCondition }
    doLast {
        for (def t : [tasks.jar, tasks.shadowJar, tasks.sourcesJar, tasks.jarJar]) {
            //noinspection HttpUrlsUsage
            ant.signjar(
                    jar: t.archiveFile.get(),
                    alias: project.findProperty("jarSign.keyAlias") ?: "",
                    keystore: project.findProperty("jarSign.keyLocation") ?: "",
                    storepass: project.findProperty("jarSign.storePass") ?: "",
                    sigalg: "Ed25519",
                    digestalg: "SHA-256",
                    tsaurl: "http://timestamp.digicert.com",
            )
        }
    }
}

tasks.named("assemble") {
    dependsOn("jksSignJar")
}

signing {
    sign(publishing.publications)
    sign(tasks.jar, tasks.shadowJar, tasks.sourcesJar, tasks.jarJar)
}

boolean hasGpgSignature = project.hasProperty("signing.keyId") &&
        project.hasProperty("signing.password") &&
        project.hasProperty("signing.secretKeyRingFile")

tasks.withType(Sign).configureEach {
    it.onlyIf {
        hasGpgSignature
    }
}

tasks.withType(AbstractPublishToMaven).configureEach {
    if (hasGpgSignature) {
        it.dependsOn(":neoforge:signJar")
        it.dependsOn(":neoforge:signSourcesJar")
        it.dependsOn(":neoforge:signJarJar")
        it.dependsOn(":neoforge:signShadowJar")
    }
}

def createChangelog() {
    String t = """\
        For Minecraft ${libs.versions.minecraft.get()}
        
        Built with Neo Forge ${libs.versions.neoforge.get()}
        
        This mod provides language provider, "kotori_scala".
        
        Scala3: ${libs.versions.scala3.get()}
        Scala: ${libs.versions.scala2.get()}
        Cats: ${libs.versions.cats.get()}
        """.stripIndent()
    return t
}

afterEvaluate {
    rootProject.tasks.named("githubRelease").configure { it.dependsOn(":neoforge:assemble") }
}

ext["archivesBaseName"] = archivesBaseName
ext["generalDescription"] = createChangelog()
