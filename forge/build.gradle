import com.kotori316.plugin.cf.CallVersionCheckFunctionTask
import com.kotori316.plugin.cf.CallVersionFunctionTask

import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id "scala"
    id "net.minecraftforge.gradle" version "[6.0.16,6.2)"
    id "org.parchmentmc.librarian.forgegradle" version "1.+"
    id "maven-publish"
    id "signing"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id("com.kotori316.plugin.cf") version("1.+")
}

version = "${libs.versions.scala3.get()}-build-${project.build_number}"
group = "com.kotori316" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ScalableCatsForce"

jarJar.enable()

minecraft {
    mappings channel: "parchment", version: ((libs.versions.parchment.get() + "-" + libs.versions.minecraft.get()) as String)
    // copyIdeResources = true
    runs {
        client {
            workingDirectory project.file("Minecraft")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

            // Recommended logging level for the console
            property "forge.logging.console.level", "info"
            property "mixin.debug", "true"

            mods {
                "scala-library-object" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run-server")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

            // Recommended logging level for the console
            property "forge.logging.console.level", "info"

            mods {
                "scala-library-object" {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file("run-server")
            property "forge.logging.markers", "REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"

            if (Boolean.valueOf(System.getenv("GITHUB_ACTIONS")))
                args "--mod", "slp_test,scala-library-object,scala-library-java", "--dev"
            else
                args "--mod", "slp_test", "--all"

            mods {
                "slp_test" {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:" + libs.versions.forge.get())
    implementation(libs.scala2)
    implementation(libs.scala3) { transitive = false }
    implementation(libs.bundles.cats) { transitive = false }

    // Jar in Jar
    jarJar(group: "org.scala-lang", name: "scala-library", version: "[${libs.versions.scala2.get()}, 3.0)") { transitive = false }
    jarJar(group: "org.scala-lang", name: "scala3-library_3", version: "[3.0, ${libs.versions.scala3.get()}]") { transitive = false }
    jarJar(group: "org.typelevel", name: "cats-core_3", version: "[2.0, ${libs.versions.cats.get()}]") { transitive = false }
    jarJar(group: "org.typelevel", name: "cats-kernel_3", version: "[2.0, ${libs.versions.cats.get()}]") { transitive = false }
    jarJar(group: "org.typelevel", name: "cats-free_3", version: "[2.0, ${libs.versions.cats.get()}]") { transitive = false }

    // Test Dependencies.
    testImplementation(libs.jupiter.api)
    testImplementation(libs.jupiter.params)
    testRuntimeOnly(libs.jupiter.engine)
    testImplementation(libs.jupiter.launcher)
}

jar {
    manifest {
        attributes([
                "FMLModType"           : "LANGPROVIDER",
                "Automatic-Module-Name": "kotori_scala",
        ])
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
        ])
    }
    archiveClassifier.set("dev")
}

tasks.register("normalJar", Jar) {
}

tasks.register("srcJar", Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Tell the artifact system about our extra jars
artifacts {
    archives shadowJar as Object, srcJar
}

shadowJar {
    def groupNames = ["org.scala-lang", "org.scala-lang.modules", "org.typelevel"]
    archiveClassifier.set("with-library")
    dependencies {
        include(dependency {
            groupNames.contains(it.moduleGroup)
        })
    }

}

tasks.jarJar.configure {
    archiveClassifier.set("jar-jar")
}

reobf {
    jarJar {}
}
tasks.jarJar.finalizedBy("reobfJarJar")

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
}

// ---------- Publish ----------
final boolean RELEASE_DEBUG = Boolean.parseBoolean(System.getenv("RELEASE_DEBUG") ?: "true")

curseforge {
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSE_TOKEN") ?: ""
    project {
        id = "320926"
        changelogType = "markdown"
        changelog = createChangelog()
        releaseType = "release"
        addGameVersion(libs.versions.minecraft.get())
        addGameVersion("Forge")
        mainArtifact(tasks.shadowJar)
        addArtifact(tasks.jar)
        addArtifact(tasks.srcJar)
        addArtifact(tasks.jarJar)
    }
    options {
        curseGradleOptions.debug = RELEASE_DEBUG // defaults to false
        curseGradleOptions.javaVersionAutoDetect = false
    }
}

modrinth {
    token = project.findProperty("modrinthToken") ?: System.getenv("MODRINTH_TOKEN") ?: ""
    projectId = "scalable-cats-force"
    versionType = "release"
    uploadFile = tasks.shadowJar
    additionalFiles = [
            tasks.jar,
            tasks.srcJar,
            tasks.jarJar,
    ]
    gameVersions = [libs.versions.minecraft.get()]
    loaders = ["forge"]
    changelog = createChangelog()
    debugMode = RELEASE_DEBUG
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName.toLowerCase()
            from components.java
            artifact srcJar

            pom {
                name = archivesBaseName
                description = "Scala Loading library build with Minecraft ${libs.versions.minecraft.get()} and Forge ${libs.versions.forge.get()}"
                url = "https://github.com/Kotori316/SLP"
                packaging = "jar"
                withXml {
                    def pomNode = asNode() as Node
                    pomNode.dependencies."*".findAll() { Node node -> node.parent().remove(node) }
                }
            }
        }
    }
}

tasks.register("jksSignJar") {
    dependsOn(tasks.shadowJar, tasks.reobfJar, tasks.reobfJarJar, tasks.srcJar)
    boolean executeCondition = project.hasProperty("jarSign.keyAlias") &&
            project.hasProperty("jarSign.keyLocation") &&
            project.hasProperty("jarSign.storePass")
    onlyIf { executeCondition }
    doLast {
        for (def t : [tasks.jar, tasks.shadowJar, tasks.srcJar, tasks.jarJar]) {
            //noinspection HttpUrlsUsage
            ant.signjar(
                    jar: t.archiveFile.get(),
                    alias: project.findProperty("jarSign.keyAlias") ?: "",
                    keystore: project.findProperty("jarSign.keyLocation") ?: "",
                    storepass: project.findProperty("jarSign.storePass") ?: "",
                    sigalg: "Ed25519",
                    digestalg: "SHA-256",
                    tsaurl: "http://timestamp.digicert.com",
            )
        }
    }
}

tasks.named("assemble") {
    dependsOn("jksSignJar")
}

signing {
    sign(publishing.publications)
    sign(tasks.jar, tasks.shadowJar, tasks.srcJar, tasks.jarJar)
}

boolean hasGpgSignature = project.hasProperty("signing.keyId") &&
        project.hasProperty("signing.password") &&
        project.hasProperty("signing.secretKeyRingFile")

tasks.withType(Sign).configureEach {
    it.onlyIf {
        hasGpgSignature
    }
}

tasks.withType(AbstractPublishToMaven).configureEach {
    if (hasGpgSignature) {
        it.dependsOn(":forge:signJar")
        it.dependsOn(":forge:signSrcJar")
        it.dependsOn(":forge:signJarJar")
        it.dependsOn(":forge:signShadowJar")
    }
}

def createChangelog() {
    String t = """\
        For Minecraft ${libs.versions.minecraft.get()}
        
        Built with forge ${libs.versions.forge.get()}
        
        This mod provides language provider, "kotori_scala".
        
        Scala3: ${libs.versions.scala3.get()}
        Scala: ${libs.versions.scala2.get()}
        Cats: ${libs.versions.cats.get()}
        """.stripIndent()
    return t
}

afterEvaluate {
    rootProject.tasks.named("githubRelease").configure { it.dependsOn(":forge:assemble") }
}

tasks.register("registerVersion", CallVersionFunctionTask.class) {
    functionEndpoint = readVersionFunctionEndpoint(project)
    gameVersion = libs.versions.minecraft.get()
    platform = "forge"
    modName = archivesBaseName
    changelog = "For ${libs.versions.minecraft.get()} with ${libs.versions.scala3.get()}"
    isDryRun = RELEASE_DEBUG
    homepage = "https://www.curseforge.com/minecraft/mc-mods/scalable-cats-force"
}

tasks.register("checkReleaseVersion", CallVersionCheckFunctionTask.class) {
    gameVersion = libs.versions.minecraft.get()
    platform = "forge"
    modName = archivesBaseName
    version = project.version as String
    failIfExists = !RELEASE_DEBUG
}
