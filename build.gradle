import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "https://maven.minecraftforge.net/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
plugins {
    id 'scala'
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

def scala_version = String.valueOf(getProperty("scala_version"))
def build_number = String.valueOf(getProperty("build_number"))
version = "${scala_version}-build-${build_number}"
group = "com.kotori316" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ScalableCatsForce"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileScala {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    runs {
        client {
            workingDirectory project.file('Minecraft')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            property "mixin.debug", "true"

            mods {
                "scala-library-object" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                "scala-library-object" {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run-server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            forceExit false

            if (Boolean.valueOf(System.getenv("GITHUB_ACTIONS")))
                args '--mod', "slp_test", '--dev'
            else
                args '--mod', "slp_test", '--all'

            mods {
                "slp_test" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        scala {
            srcDir 'src/main/scala'
            exclude "/com/kotori316/scala_lib/asm/**"
            if (System.getenv("CI") == null) {
                exclude "/com/kotori316/scala_lib/example/**"
            }
        }
    }
}

private static String forgeVersion() {
    String CI_FORGE = System.getenv("CI_FORGE")
    if (CI_FORGE != null && CI_FORGE != "fixed") {
        return "net.minecraftforge:forge:" + CI_FORGE
    } else {
        return 'net.minecraftforge:forge:1.16.5-36.1.0'
    }
}

def mainClassName = "com.kotori316.scala_lib.Main"
dependencies {
    String scala_major = scala_version.substring(0, scala_version.lastIndexOf("."))
    String cats_version = getProperty("cats_version")

    minecraft(forgeVersion())
    // https://mvnrepository.com/artifact/org.scala-lang/scala-library
    implementation(group: 'org.scala-lang', name: 'scala-library', version: scala_version)
    // https://mvnrepository.com/artifact/org.typelevel/cats-core
    implementation(group: 'org.typelevel', name: "cats-core_" + scala_major, version: cats_version)

    // Test Dependencies.
    implementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0')
    runtimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0')
    implementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.0')

}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes([
                'FMLModType': 'LANGPROVIDER'
        ])
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
                'Main-Class'              : mainClassName
        ])
    }
    archiveClassifier.set('dev')
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

// Tell the artifact system about our extra jars
artifacts {
    archives shadowJar as Object, srcJar
}

shadowJar {
    def groupNames = ['org.scala-lang', 'org.scala-lang.modules', 'org.typelevel']
    archiveClassifier.set("with-library")
    dependencies {
        include(dependency {
            groupNames.contains(it.moduleGroup)
        })
    }

}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Kotori316/SLP")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
            }
        }
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        String v = forgeVersion()
        String minecraftVersion = v.substring(v.lastIndexOf(":") + 1, v.lastIndexOf("-"))
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName.toLowerCase()
            artifact srcJar
            artifact jar
            pom {
                name = archivesBaseName
                description = "Scala Loading library for Minecraft for $minecraftVersion, build with forge $v"
                url = 'https://github.com/Kotori316/SLP'
                packaging = "jar"
                withXml {
                    asNode().children().last() + {
                        Project p = getProject()
                        resolveStrategy = Closure.DELEGATE_FIRST
                        dependencies {
                            p.configurations.implementation.dependencies.each { Dependency dep ->
                                if (!dep.name.contains("junit")) {
                                    dependency {
                                        groupId dep.group
                                        artifactId dep.name
                                        version dep.version
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

task data() {
    doLast {
        println("Java: ${System.getProperty('java.version')} JVM: ${System.getProperty('java.vm.version')}" +
                "(${System.getProperty('java.vendor')}) Arch: ${System.getProperty('os.arch')}")
        println("Scala: $scala_version, ${scala_version.getClass()}")
        println("Build Number: $build_number, ${build_number.getClass()}")
        println("Version: $version, ${version.getClass()}")
        String v = forgeVersion()
        println("Forge: $v")
        println("Minecraft: ${v.substring(v.lastIndexOf(":") + 1, v.lastIndexOf("-"))}")
        print(System.lineSeparator() * 2)
        println("All Dependencies")
        getProject().getConfigurations().forEach { con ->
            if (!con.dependencies.isEmpty()) {
                println("*" * 20)
                println(con.name)
                for (Object o : con.dependencies) {
                    println(o)
                }
            }
        }
        print(System.lineSeparator() * 2)
        println("Dependencies to be included in pom")
        getProject().getConfigurations().implementation.dependencies.each { Dependency dep ->
            if (!dep.name.contains("junit")) {
                printf("Group: %s, ArtifactId: %s, Version: %s%n", dep.group, dep.name, dep.version)
            } else {
                printf("JUNIT - Group: %s, ArtifactId: %s, Version: %s%n", dep.group, dep.name, dep.version)
            }
        }
        print(System.lineSeparator() * 2)
        println("Publishing Information")
        publishing.properties.each { entry ->
            printf("%s -> %s (key: %s, value: %s)%n", entry.key, entry.value, entry.getKey().getClass(), entry.getValue().getClass())
        }
        println()
        println("Repositories")
//        publishing.properties.get("repositories").getClass().getMethods().each { println(it) }
//        publishing.properties.get("repositories").getClass().getInterfaces().each { println(it) }
        publishing.properties.get("repositories").getAsMap().each { Map.Entry<String, Object> e -> printf("%s=%s\n", e.key, e.value.getUrl()) }
//        (publishing.properties.get("repositories") as Collection<Object>).toArray()[0].getClass().getMethods().each {println(it)}
    }
}
