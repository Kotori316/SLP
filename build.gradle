plugins {
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
    id "com.github.breadmoirai.github-release" version "2.4.1"
}

tasks.named("wrapper", Wrapper.class) {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = "8.5"
}

version = "${libs.versions.scala3.get()}-build-${project.build_number}"

final boolean RELEASE_DEBUG = Boolean.parseBoolean(System.getenv("RELEASE_DEBUG") ?: "true")
githubRelease {
    setOwner("Kotori316")
    repo.set("SLP")
    token = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN") ?: ""
    targetCommitish.set(project.property("branch") as String)
    prerelease.set(project.version.toString().contains("SNAPSHOT"))
    body.set("""\
        For Minecraft ${libs.versions.minecraft.get()}
        
        This mod provides language provider, "kotori_scala".
        
        Scala3: ${libs.versions.scala3.get()}
        Scala: ${libs.versions.scala2.get()}
        Cats: ${libs.versions.cats.get()}
        """.stripIndent())
    releaseAssets = files(
            releaseAssets = files(
                    fileTree(findProject(":forge")?.layout?.buildDirectory?.dir("libs")) {
                        include("*.jar")
                    },
                    fileTree(findProject(":neoforge")?.layout?.buildDirectory?.dir("libs")) {
                        include("*.jar")
                    }
            )
    )
    dryRun.set(RELEASE_DEBUG)
}

subprojects {
    apply(plugin: "scala")
    apply(plugin: "maven-publish")

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    repositories {
        mavenLocal()
        maven {
            name = "Azure-SLP"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            content {
                it.includeVersion("org.typelevel", "cats-core_3", libs.versions.cats.get())
                it.includeVersion("org.typelevel", "cats-kernel_3", libs.versions.cats.get())
                it.includeVersion("org.typelevel", "cats-free_3", libs.versions.cats.get())
            }
        }
    }

    publishing {
        repositories {
            if (!RELEASE_DEBUG) {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/Kotori316/SLP")
                    credentials {
                        username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                        password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
                    }
                }
                maven {
                    name = "AzureRepository"
                    url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
                    credentials {
                        username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                        password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
                    }
                }
                if (System.getenv("CLOUDFLARE_S3_ENDPOINT") != null) {
                    def r2AccessKey = (project.findProperty("r2_access_key") ?: System.getenv("R2_ACCESS_KEY") ?: "") as String
                    def r2SecretKey = (project.findProperty("r2_secret_key") ?: System.getenv("R2_SECRET_KEY") ?: "") as String
                    maven {
                        name = "kotori316-maven"
                        url = uri("s3://kotori316-maven")
                        credentials(AwsCredentials.class) {
                            accessKey = r2AccessKey
                            secretKey = r2SecretKey
                        }
                    }
                }
            }
            if (System.getenv("CI") == null) {
                maven {
                    name = "MavenTestGCP"
                    url = uri("gcs://kotori316-maven-test-storage/maven/")
                }
            }
        }
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
    }

    tasks.register("data") {
        doLast {
            println("Java: ${System.getProperty("java.version")} JVM: ${System.getProperty("java.vm.version")}" +
                    "(${System.getProperty("java.vendor")}) Arch: ${System.getProperty("os.arch")}")
            println("Scala: ${libs.versions.scala3.get()}")
            println("Build Number: $build_number, ${build_number.getClass()}")
            println("Version: $version, ${version.getClass()}")
            println("Minecraft: ${libs.versions.minecraft.get()}")
            println("Forge: ${libs.versions.forge.get()}")
            println("NeoForge: ${libs.versions.neoforge.get()}")
            print(System.lineSeparator() * 2)
            println("All Dependencies")
            getProject().getConfigurations().forEach { con ->
                if (!con.dependencies.isEmpty()) {
                    start_group(con.name)
                    for (Object o : con.dependencies) {
                        println(o)
                    }
                    end_group()
                }
            }
            print(System.lineSeparator() * 2)
            start_group("Dependencies to be included in pom")
            getProject().getConfigurations().implementation.dependencies.each { Dependency dep ->
                if (!dep.name.contains("junit")) {
                    printf("Group: %s, ArtifactId: %s, Version: %s%n", dep.group, dep.name, dep.version)
                } else {
                    printf("JUNIT - Group: %s, ArtifactId: %s, Version: %s%n", dep.group, dep.name, dep.version)
                }
            }
            end_group()
            start_group("Publishing Information")
            publishing.properties.each { Map.Entry<?, ?> entry ->
                printf("%s -> %s (key: %s, value: %s)%n", entry.key, entry.value, entry.getKey().getClass(), entry.getValue().getClass())
            }
            end_group()
            start_group("Repositories")
            publishing.properties.get("repositories").getAsMap().each { Map.Entry<String, Object> e -> printf("%s=%s%n", e.key, e.value.getUrl()) }
            end_group()
            start_group("Changelog")
            println(project.createChangelog() as String)
            end_group()
        }
    }
}

static void start_group(String name) {
    println("::group::${name}")
}

@SuppressWarnings("SpellCheckingInspection")
static void end_group() {
    println("::endgroup::")
}
