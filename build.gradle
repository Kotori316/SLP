import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util.function.Predicate

plugins {
    id 'scala'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'maven-publish'
    id 'signing'
    id "com.github.breadmoirai.github-release" version "2.4.1"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

def build_number = String.valueOf(getProperty("build_number"))
version = "${project.scala3_version}-build-${build_number}"
group = "com.kotori316" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ScalableCatsForce"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
jarJar.enable()

minecraft {
    mappings channel: 'parchment', version: ((project.parchmentMapping + "-" + minecraftVersion()) as String)
    // copyIdeResources = true
    runs {
        client {
            workingDirectory project.file('Minecraft')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            property "mixin.debug", "true"

            mods {
                "scala-library-object" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                "scala-library-object" {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run-server')
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            if (Boolean.valueOf(System.getenv("GITHUB_ACTIONS")))
                args '--mod', "slp_test,scala-library-object,scala-library-java", '--dev'
            else
                args '--mod', "slp_test", '--all'

            mods {
                "slp_test" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        scala {
            exclude "/com/kotori316/scala_lib/example/**"
        }
        java {
            srcDir 'src/main/java'
        }
    }
}

private String forgeVersion() {
    return (java.util.Optional.ofNullable(System.getenv("CI_FORGE"))
            .filter(Predicate.isEqual("fixed").negate()) | () -> java.util.Optional.of(project.forgeVersion))
            .map { version -> "net.minecraftforge:forge:" + version }
            .orElse(null)
}

private String minecraftVersion() {
    String v = forgeVersion()
    return v.substring(v.lastIndexOf(":") + 1, v.lastIndexOf("-"))
}

repositories {
    mavenLocal()
    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            it.includeVersion("org.typelevel", "cats-core_3", String.valueOf(project.cats_version))
            it.includeVersion("org.typelevel", "cats-kernel_3", String.valueOf(project.cats_version))
            it.includeVersion("org.typelevel", "cats-free_3", String.valueOf(project.cats_version))
        }
    }
}

dependencies {
    String cats_version = getProperty("cats_version")

    minecraft(forgeVersion())
    // https://mvnrepository.com/artifact/org.scala-lang/scala-library
    implementation(group: 'org.scala-lang', name: 'scala-library', version: project.scala_version)
    implementation(group: "org.scala-lang", name: "scala3-library_3", version: project.scala3_version) { transitive = false }
    // https://mvnrepository.com/artifact/org.typelevel/cats-core
    implementation(group: 'org.typelevel', name: "cats-kernel_3", version: cats_version) { transitive = false }
    implementation(group: 'org.typelevel', name: "cats-core_3", version: cats_version) { transitive = false }
    implementation(group: 'org.typelevel', name: "cats-free_3", version: cats_version) { transitive = false }

    // Jar in Jar
    jarJar(group: 'org.scala-lang', name: 'scala-library', version: "[$project.scala_version, 3.0)") { transitive = false }
    jarJar(group: 'org.scala-lang', name: 'scala3-library_3', version: "[3.0, $project.scala3_version]") { transitive = false }
    jarJar(group: 'org.typelevel', name: "cats-core_3", version: "[2.0, $cats_version]") { transitive = false }
    jarJar(group: 'org.typelevel', name: "cats-kernel_3", version: "[2.0, $cats_version]") { transitive = false }
    jarJar(group: 'org.typelevel', name: "cats-free_3", version: "[2.0, $cats_version]") { transitive = false }

    // Test Dependencies.
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.jupiterVersion)
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: project.jupiterVersion)
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.jupiterVersion)
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: project.jupiterPlatformVersion)

}

test {
    useJUnitPlatform()

    testLogging {
        events "skipped", "failed", "standardOut", "standardError"
        exceptionFormat 'full'
    }
}

jar {
    manifest {
        attributes([
                'FMLModType'           : 'LANGPROVIDER',
                'Automatic-Module-Name': 'kotori_scala',
        ])
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
        ])
    }
    archiveClassifier.set('dev')
}

tasks.register('normalJar', Jar) {
}

tasks.register('srcJar', Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Tell the artifact system about our extra jars
artifacts {
    archives shadowJar as Object, srcJar
}

shadowJar {
    def groupNames = ['org.scala-lang', 'org.scala-lang.modules', 'org.typelevel']
    archiveClassifier.set("with-library")
    dependencies {
        include(dependency {
            groupNames.contains(it.moduleGroup)
        })
    }

}

tasks.jarJar.configure {
    archiveClassifier.set("jar-jar")
}

reobf {
    jarJar {}
}
tasks.jarJar.finalizedBy('reobfJarJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// ---------- Publish ----------

curseforge {
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSE_TOKEN") ?: ""
    project {
        id = '320926'
        changelogType = 'markdown'
        changelog = project.getChangelog()
        releaseType = 'release'
        addGameVersion("1.20.1")
        addGameVersion("1.20.2")
        mainArtifact(tasks.shadowJar)
        addArtifact(tasks.jar)
        addArtifact(tasks.srcJar)
        addArtifact(tasks.jarJar)
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}

githubRelease {
    repo.set('SLP')
    token = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN") ?: ""
    targetCommitish.set(project.branch as String)
    prerelease.set(project.version.toString().contains("SNAPSHOT"))
    body.set(getChangelog())
    releaseAssets = files(
            tasks.shadowJar,
            tasks.jarJar,
            tasks.jar,
            tasks.srcJar,
    )
    dryRun.set(false)
}

modrinth {
    token = project.findProperty("modrinthToken") ?: System.getenv("MODRINTH_TOKEN") ?: ""
    projectId = "scalable-cats-force"
    versionType = "release"
    uploadFile = tasks.shadowJar
    additionalFiles = [
            tasks.jar,
            tasks.srcJar,
            tasks.jarJar,
    ]
    gameVersions = ["1.20.1", "1.20.2"]
    loaders = ["forge"]
    changelog = project.getChangelog()
    debugMode = false
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Kotori316/SLP")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
            }
        }
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName.toLowerCase()
            from components.java
            artifact srcJar


            pom {
                name = archivesBaseName
                description = "Scala Loading library build with Minecraft ${minecraftVersion()} and Forge ${forgeVersion()}"
                url = 'https://github.com/Kotori316/SLP'
                packaging = "jar"
                withXml {
                    def pomNode = asNode() as Node
                    pomNode.dependencies."*".findAll() { Node node -> node.parent().remove(node) }
                }
            }
        }
    }
}

tasks.register("jksSignJar") {
    dependsOn(tasks.shadowJar, tasks.reobfJar, tasks.reobfJarJar, tasks.srcJar)
    boolean executeCondition = project.hasProperty("jarSign.keyAlias") &&
            project.hasProperty("jarSign.keyLocation") &&
            project.hasProperty("jarSign.storePass")
    onlyIf { executeCondition }
    doLast {
        for (def t : [tasks.jar, tasks.shadowJar, tasks.srcJar, tasks.jarJar]) {
            //noinspection HttpUrlsUsage
            ant.signjar(
                    jar: t.archiveFile.get(),
                    alias: project.findProperty("jarSign.keyAlias") ?: "",
                    keystore: project.findProperty("jarSign.keyLocation") ?: "",
                    storepass: project.findProperty("jarSign.storePass") ?: "",
                    sigalg: "Ed25519",
                    digestalg: "SHA-256",
                    tsaurl: "http://timestamp.digicert.com",
            )
        }
    }
}

tasks.named("assemble") {
    dependsOn("jksSignJar")
}

signing {
    sign(publishing.publications)
    sign(tasks.jar, tasks.shadowJar, tasks.srcJar, tasks.jarJar)
}

boolean hasGpgSignature = project.hasProperty("signing.keyId") &&
        project.hasProperty("signing.password") &&
        project.hasProperty("signing.secretKeyRingFile")

tasks.withType(Sign).configureEach {
    it.onlyIf {
        hasGpgSignature
    }
}

tasks.withType(AbstractPublishToMaven).configureEach {
    if (hasGpgSignature) {
        it.dependsOn(":signJar")
        it.dependsOn(":signSrcJar")
        it.dependsOn(":signJarJar")
        it.dependsOn(":signShadowJar")
    }
}

def getChangelog() {
    String t = """\
        For Minecraft ${minecraftVersion()}
        
        Built with forge ${forgeVersion()}
        
        This mod provides language provider, "kotori_scala".
        
        Scala3: ${project.scala3_version}
        Scala: ${project.scala_version}
        Cats: ${project.cats_version}
        """.stripIndent()
    return t
}

// --------- Github Actions ----------

static void start_group(String name) {
    println("::group::${name}")
}

@SuppressWarnings('SpellCheckingInspection')
static void end_group() {
    println("::endgroup::")
}

tasks.register('data') {
    doLast {
        println("Java: ${System.getProperty('java.version')} JVM: ${System.getProperty('java.vm.version')}" +
                "(${System.getProperty('java.vendor')}) Arch: ${System.getProperty('os.arch')}")
        println("Scala: ${project.scala_version}, ${project.scala_version.getClass()}")
        println("Build Number: $build_number, ${build_number.getClass()}")
        println("Version: $version, ${version.getClass()}")
        println("Scala Loading library build with Minecraft ${minecraftVersion()} and Forge ${forgeVersion()}")
        println("Forge: ${forgeVersion()}")
        println("Minecraft: ${minecraftVersion()}")
        print(System.lineSeparator() * 2)
        println("All Dependencies")
        getProject().getConfigurations().forEach { con ->
            if (!con.dependencies.isEmpty()) {
                start_group(con.name)
                for (Object o : con.dependencies) {
                    println(o)
                }
                end_group()
            }
        }
        print(System.lineSeparator() * 2)
        start_group("Dependencies to be included in pom")
        getProject().getConfigurations().implementation.dependencies.each { Dependency dep ->
            if (!dep.name.contains("junit")) {
                printf("Group: %s, ArtifactId: %s, Version: %s%n", dep.group, dep.name, dep.version)
            } else {
                printf("JUNIT - Group: %s, ArtifactId: %s, Version: %s%n", dep.group, dep.name, dep.version)
            }
        }
        end_group()
        start_group("Publishing Information")
        publishing.properties.each { Map.Entry<?, ?> entry ->
            printf("%s -> %s (key: %s, value: %s)%n", entry.key, entry.value, entry.getKey().getClass(), entry.getValue().getClass())
        }
        end_group()
        start_group("Repositories")
//        publishing.properties.get("repositories").getClass().getMethods().each { println(it) }
//        publishing.properties.get("repositories").getClass().getInterfaces().each { println(it) }
        publishing.properties.get("repositories").getAsMap().each { Map.Entry<String, Object> e -> printf("%s=%s%n", e.key, e.value.getUrl()) }
//        (publishing.properties.get("repositories") as Collection<Object>).toArray()[0].getClass().getMethods().each {println(it)}
        end_group()
        start_group("Changelog")
        println(getChangelog())
        end_group()
    }
}

