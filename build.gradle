buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id 'scala'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


def scala_version = getProperty("scala_version")
version = "$scala_version"
group = "com.kotori316" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Scala-library"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileScala {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    mappings channel: 'snapshot', version: '20190719-1.14.3'
    runs {
        client {
            workingDirectory project.file('Minecraft')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                "scala-library" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                "scala-library" {
                    source sourceSets.main
                }
            }
        }
    }
}

def mainClassName = "com.kotori316.scala_lib.Main"
dependencies {
    def scala_major = getProperty("scala_major")
    def java8_compat_version = getProperty("java8_compat_version")
    def cats_version = getProperty("cats_version")

    minecraft 'net.minecraftforge:forge:1.14.4-28.0.45'
    implementation "org.scala-lang:scala-library:${scala_version}"
//    implementation "org.scala-lang.modules:scala-java8-compat_${scala_major}:${java8_compat_version}"

    // https://mvnrepository.com/artifact/org.typelevel/cats-core
    implementation group: 'org.typelevel', name: "cats-core_${scala_major}", version: cats_version

    // Test Dependencies.
    testCompile("org.junit.jupiter:junit-jupiter-api:5.4.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.4.2")
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes([
                'FMLModType': 'LANGPROVIDER'
        ])
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Main-Class'              : mainClassName
        ])
    }
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// Tell the artifact system about our extra jars
artifacts {
    archives shadowJar, srcJar
}

shadowJar {
    def groupNames = ['org.scala-lang', 'org.scala-lang.modules', 'org.typelevel']
    classifier = "with-library"
    dependencies {
        include(dependency {
            groupNames.contains(it.moduleGroup)
        })
    }

}
